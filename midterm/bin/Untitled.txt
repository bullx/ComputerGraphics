//
//  cgCanvas.java
//
//
//  Created by Joe Geigel on 1/21/10.
//  Copyright 2010 Rochester Institute of Technology. All rights reserved.
//

/**
 * This is a simple canvas class for adding functionality for the
 * 2D portion of Computer Graphics.
 *
 */

import Jama.*;

import java.util.*;

public class cgCanvas extends simpleCanvas {
	/**
	 * Declaration of variables
	 */
	int id = 0;
	HashMap<Integer, polygon> h = new HashMap<Integer, polygon>();
	float x0, y0, x1, y1, view_y, view_width, view_height;
	float view_x = 0;
	Matrix m;
	Rasterizer r = new Rasterizer(601);
	Matrix trans = Matrix.identity(3, 3);
	Matrix scale = Matrix.identity(3, 3);
	Matrix view = Matrix.identity(3, 3);

	/**
	 * Constructor
	 *
	 * @param w
	 *            width of canvas
	 * @param h
	 *            height of canvas
	 */
	cgCanvas(int w, int h) {

		super(w, h);
		// YOUR IMPLEMENTATION HERE if you need to modify the constructor

	}

	/**
	 * addPoly - Adds and stores a polygon to the canvas. Note that this method
	 * does not draw the polygon, but merely stores it for later draw. Drawing
	 * is initiated by the draw() method.
	 *
	 * Returns a unique integer id for the polygon.
	 *
	 * @param x
	 *            - Array of x coords of the vertices of the polygon to be added
	 * @param y
	 *            - Array of y coords of the vertices of the polygin to be added
	 * @param n
	 *            - Number of verticies in polygon
	 *
	 * @return a unique integer identifier for the polygon
	 */
	public int addPoly(float x[], float y[], int n) {
		// YOUR IMPLEMENTATION HERE
		// store in array of float the passed polygon values
		float[] a = new float[x.length];
		float[] b = new float[y.length];
		for (int i = 0; i < a.length; i++) {
			a[i] = x[i];
			b[i] = y[i];
		}
		// put into polygon
		polygon p = new polygon(a, b, n);
		h.put(id, p);
		id++;

		// REMEMBER TO RETURN A UNIQUE ID FOR THE POLYGON
		return id - 1;
	}

	/**
	 * drawPoly - Draw the polygon with the given id. Should draw the polygon
	 * after applying the current transformation on the vertices of the polygon.
	 *
	 * @param polyID
	 *            - the ID of the polygon to be drawn
	 */
	public void drawPoly(int polyID) {

		if (polyID == 4) {
			clearTransform();
		}

		polygon p = h.get(polyID);
		// initilization of matrix

		float result_x[], result_y[];
		result_x = new float[100];
		result_y = new float[100];
		clipper c = new clipper();
		// sent to clipping method for clipping the polygon
		int length = c.clipPolygon(p.n, p.a, p.b, result_x, result_y, x0, y0,
				x1, y1);
		int u = 0;
		// multiplying the values passed in matrix and giving the output for
		// printing
		ArrayList<Matrix> al = new ArrayList<Matrix>();
		ArrayList<Matrix> al1 = new ArrayList<Matrix>();
		Matrix m1, m2 = null, m3, m4, new_input,temp1,temp2,temp3,temp4 = null;
		while (u < length) {
			double matrix[][] = { { result_x[u] }, { result_y[u] }, { 1 } };
			m1 = new Matrix(matrix);
			al.add(m1);
			u++;

		}
		int f = 0;
		while (f < al.size()) {
			new_input = m.times(al.get(f));
			m2 = setter(al.get(f), new_input);
			al1.add(m2);
			// for shifting
			
			f++;
		}
		int e=0;
		while(e<al1.size()){
			trans.set(0, 2, -1 * x0);
			trans.set(1, 2, -1 * y0);
			temp2 = trans.times(al1.get(e));
			m3 = setter(al1.get(e), temp2);
			// scaling the size
			float a1 = view_width / (x1 - x0);
			float b1 = view_height / (y1 - y0);
			scale.set(0, 0, a1);
			scale.set(1, 1, b1);
			temp3 = scale.times(m3);
			m4 = setter(al1.get(e), temp3);
			// for changing viewport 
			view.set(0, 2, view_x);
			view.set(1, 2, view_y);
			temp4 = view.times(m4);
			result_x[e] = (int) temp4.get(0, 0);
			result_y[e] = (int) temp4.get(1, 0);
			e++;
		}

		// Calling the draw polygon method
		r.drawPolygon(length, result_x, result_y, this);

	}

	/**
	 * clearTransform - Set the current transformation to the identity matrix.
	 */
	public void clearTransform() {
		// YOUR IMPLEMENTATION HERE
		double[][] identity = new double[][] { { 1, 0, 0 }, { 0, 1, 0 },
				{ 0, 0, 1 } };
		m = new Matrix(identity);

	}

	/**
	 * translate - Add a translation to the current transformation by
	 * pre-multiplying the appropriate translation matrix to the current
	 * transformation matrix.
	 *
	 * @param x
	 *            - Amount of translation in x
	 * @param y
	 *            - Amount of translation in y
	 */
	public void translate(float x, float y) {
		// YOUR IMPLEMENTATION HERE
		double matrix[][] = { { 1, 0, x }, { 0, 1, y }, { 0, 0, 1 } };

		Matrix trans = new Matrix(matrix);
		m = trans.times(m);
	}

	/**
	 * rotate - Add a rotation to the current transformation by pre-multiplying
	 * the appropriate rotation matrix to the current transformation matrix.
	 *
	 * @param degrees
	 *            - Amount of rotation in degrees
	 */
	public void rotate(float degrees) {
		// YOUR IMPLEMENTATION HERE

		double matrix1[][] = {
				{ Math.cos(Math.toRadians(degrees)),
						(-1) * Math.sin(Math.toRadians(degrees)), 0 },
				{ Math.sin(Math.toRadians(degrees)),
						Math.cos(Math.toRadians(degrees)), 0 }, { 0, 0, 1 } };
		Matrix rotate = new Matrix(matrix1);
		m = rotate.times(m);

	}

	/**
	 * scale - Add a scale to the current transformation by pre-multiplying the
	 * appropriate scaling matrix to the current transformation matrix.
	 *
	 * @param x
	 *            - Amount of scaling in x
	 * @param y
	 *            - Amount of scaling in y
	 */
	public void scale(float x, float y) {
		// YOUR IMPLEMENTATION HERE

		double matrix[][] = { { x, 0, 0 }, { 0, y, 0 }, { 0, 0, 1 } };
		Matrix scale = new Matrix(matrix);
		m = scale.times(m);

	}

	/**
	 * setClipWindow - defines the clip window
	 *
	 * @param bottom
	 *            - y coord of bottom edge of clip window (in world coords)
	 * @param top
	 *            - y coord of top edge of clip window (in world coords)
	 * @param left
	 *            - x coord of left edge of clip window (in world coords)
	 * @param right
	 *            - x coord of right edge of clip window (in world coords)
	 */
	public void setClipWindow(float bottom, float top, float left, float right) {
		y0 = bottom;
		x0 = left;
		y1 = top;
		x1 = right;
	}

	/**
	 * setViewport - defines the viewport
	 *
	 * @param xmin
	 *            - x coord of lower left of view window (in screen coords)
	 * @param ymin
	 *            - y coord of lower left of view window (in screen coords)
	 * @param width
	 *            - width of view window (in world coords)
	 * @param height
	 *            - width of view window (in world coords)
	 */
	public void setViewport(int x, int y, int width, int height) {
		// YOUR IMPLEMENTATION HERE
		view_x = x;
		view_y = y;
		view_width = width;
		view_height = height;
	}

	/**
	 * Sets in matrix
	 * 
	 * @param m1
	 * @param input
	 * @return the matrix with values
	 */
	public Matrix setter(Matrix m1, Matrix input) {
		double aa = input.get(0, 0);
		double bb = input.get(1, 0);
		m1.set(0, 0, aa);
		m1.set(1, 0, bb);

		return m1;
	}

}

/**
 * 
 * @class Polygon This stores the shapes with the hashmap
 */
class polygon {

	float a[], b[];
	int n;

	/**
	 * 
	 * @param x
	 *            - array of x co-ords
	 * @param y
	 *            - array of y co-ords
	 * @param n
	 *            - number of vertices
	 */
	public polygon(float x[], float y[], int n) {

		this.a = x;
		this.b = y;
		this.n = n;

	}
}
